This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-02T08:29:31.504Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  assets/
    css/
      main.css
  components/
    card/
      PokemonCard.vue
      PokemonImages.vue
      PokemonJpName.vue
    favorite/
      FavoritePokemon.vue
    modal/
      Modal.vue
    pagination/
      Pagination.vue
    PokemonList.vue
  composables/
    useModal.ts
  pages/
    index.vue
  plugins/
    axios.ts
  public/
    robots.txt
  server/
    tsconfig.json
  services/
    pokeApi.ts
  stores/
    pokemonDataStore_V2.ts
  types/
    pokemonDataStoreTypes.ts
  utils/
    toggleFavorite.ts
    urlUtils.ts
.gitignore
app.vue
nuxt.config.ts
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json

================================================================
Files
================================================================

================
File: src/assets/css/main.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/components/card/PokemonCard.vue
================
<!-- src/components/card/PokemonCard.vue -->
<script setup>
import PokemonImages from '@/components/card/PokemonImages.vue';
import PokemonJpName from '@/components/card/PokemonJpName.vue';
import Modal from '@/components/modal/Modal.vue'
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2';
import useModal from '@/composables/useModal';

const usePokemonDataStore = usePokemonDataStoreV2();

const { isModalOpen, openModal, closeModal } = useModal();

const props = defineProps({
  data: {
    type: Object,
    required: true
  }
});
</script>

<template>
  <div class="bg-white p-2 rounded-lg" @click="openModal()">
    <div class="flex">
      <PokemonJpName :name="data.name" :url="data.url"/>
      <svg
        v-if="usePokemonDataStore.favoritePokemonList.some(pokemon => pokemon.name === data.name)"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
        class="favorite-icon favorite-active"
      >
        <path
          fill="currentColor"
          d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
        />
      </svg>
    </div>
    <PokemonImages :name="data.name"/>

    <!-- モーダルウィンドウの表示 -->
    <Modal v-if="isModalOpen" :name="data.name" :url="data.url" @close="closeModal()"/>
  </div>
</template>

<style scoped>
/* 星アイコンのサイズ調整 */
.favorite-icon {
  width: 24px;
  height: 24px;
  transition: color 0.3s ease;
}

/* 登録済みの場合の色 (黄色) */
.favorite-active {
  color: #ffc107;
}
</style>

================
File: src/components/card/PokemonImages.vue
================
<script setup>
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2';
const pokemonDataStore = usePokemonDataStoreV2();

const props = defineProps ({
  name: {
    type: String,
    required: true
  },
});

</script>

<template>
    <img :src="pokemonDataStore.displayImageDataV2[props.name]" alt="">
</template>

================
File: src/components/card/PokemonJpName.vue
================
<script setup>
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2';
const pokemonDataStore = usePokemonDataStoreV2();

const props = defineProps({
  name: {
    type: String,
    required: true
  }
});

</script>

<template>
  <p>{{ pokemonDataStore.displayJpNameDataV2[props.name] }}</p>
</template>

================
File: src/components/favorite/FavoritePokemon.vue
================
<script setup>
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2';
import { toggleFavorite } from '@/utils/toggleFavorite';

const pokemonDataStore= usePokemonDataStoreV2()

const props = defineProps({
  name: {
    type: String,
    required: true
  },
  url: {
    type: String,
    required: true
  }
})

const isFavorite = ref(false);

watchEffect(() => {
  isFavorite.value = pokemonDataStore.favoritePokemonList.some(pokemon => pokemon.name === props.name);
});
</script>

<template>
  <button @click="toggleFavorite(isFavorite, name, url)" class="favorite-button">
    <!-- お気に入り登録時は黄色、未登録時は灰色 -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      class="favorite-icon"
      :class="{ 'favorite-active': isFavorite, 'favorite-inactive': !isFavorite }"
    >
      <path
        fill="currentColor"
        d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
      />
    </svg>
  </button>
</template>

<style scoped>
/* ボタンのデザインを調整 */
.favorite-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
}

/* 星アイコンのサイズ調整 */
.favorite-icon {
  width: 24px;
  height: 24px;
  transition: color 0.3s ease;
}

/* 登録済みの場合の色 (黄色) */
.favorite-active {
  color: #ffc107;
}

/* 未登録の場合の色 (灰色) */
.favorite-inactive {
  color: #ccc;
}
</style>

================
File: src/components/modal/Modal.vue
================
<!-- src/components/modal/Modal.vue -->
<script setup>
import FavoritePokemon from '@/components/favorite/FavoritePokemon.vue';
import PokemonImages from '@/components/card/PokemonImages.vue';
import PokemonJpName from '@/components/card/PokemonJpName.vue';
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2';
import { toggleFavorite } from '@/utils/toggleFavorite';

const pokemonDataStore = usePokemonDataStoreV2();

const props = defineProps({
  name: {
    type: String,
    required: true
  },
  url: {
    type: String,
    required: true
  }
})

const isFavorite = computed(() =>
  pokemonDataStore.favoritePokemonList.some(pokemon => pokemon.name === props.name)
);
</script>

<template>
  <div class="modal-overlay" @click.stop="$emit('close')">
    <div class="modal-content" @click.stop>
      <FavoritePokemon :name="name" :url="url"/>
      <PokemonJpName :name="name"/>
      <PokemonImages :name="name"/>
      <button class="block" @click="toggleFavorite(isFavorite, name, url)">お気に入り</button>
      <button class="close-button" @click.stop="$emit('close')">閉じる</button>
    </div>
  </div>
</template>

<style scoped>
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}
.modal-content {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.close-button {
  margin-top: 20px;
}
</style>

================
File: src/components/pagination/Pagination.vue
================
<script setup>
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2';

const pokemonDataStore = usePokemonDataStoreV2();

// ページネーション操作
const isFirstPage = computed(() => pokemonDataStore.currentPage === 1);
const isLastPage = computed(() => {
  return pokemonDataStore.currentPage * pokemonDataStore.itemsPerPage >= pokemonDataStore.displayPokemonList.length;
});

const prevPage = () => {
  if (!isFirstPage.value) {
    pokemonDataStore.updatePaginatedPokemonList(pokemonDataStore.currentPage - 1);
  }
};

const nextPage = () => {
  if (!isLastPage.value) {
    pokemonDataStore.updatePaginatedPokemonList(pokemonDataStore.currentPage + 1);
  }
};
</script>

<template>
  <nav aria-label="Pagination" class="flex justify-center items-center mt-4">
    <button @click="prevPage" :disabled="isFirstPage">＜</button>
    <span>Page {{ pokemonDataStore.currentPage }}</span>
    <button @click="nextPage" :disabled="isLastPage">＞</button>
  </nav>
</template>

<style scoped>
button {
  margin: 0 5px;
  padding: 8px 16px;
  border: none;
  border-radius: 4px;
  background-color: #f5f5f5;
  cursor: pointer;
  transition: background-color 0.3s ease;
}
button:disabled {
  background-color: #ddd;
  cursor: not-allowed;
}
</style>

================
File: src/components/PokemonList.vue
================
<script setup lang="ts">
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2';
import PokemonCard from '@/components/card/PokemonCard.vue';

const pokemonDataStore = usePokemonDataStoreV2();

// 初回データロード
onMounted(async () => {
  await pokemonDataStore.getPokemonList();
  pokemonDataStore.getPokemonIdList();
  pokemonDataStore.loadPokemonImageV2();
  pokemonDataStore.loadPokemonJpNameV2();
});
</script>

<template>
  <div>
    <button @click="pokemonDataStore.toggleShowFavorites" class="toggle-button">
        {{ pokemonDataStore.showFavorites ? '全ポケモンを見る' : 'お気に入りのみ表示' }}
    </button>
    <div v-if="pokemonDataStore.filteredPokemonList.length" class="container">
      <ul class="flex flex-wrap gap-3 justify-center">
        <li v-for="pokemon in pokemonDataStore.filteredPokemonList" :key="pokemon.name">
          <PokemonCard :data="pokemon" />
        </li>
      </ul>
    </div>
    <p v-else>Loading Pokémon data...</p>
  </div>
</template>

<style scoped>
.toggle-button {
  background-color: #ffcc00;
  padding: 10px 15px;
  border-radius: 5px;
  font-weight: bold;
  cursor: pointer;
  margin-bottom: 10px;
}
</style>

================
File: src/composables/useModal.ts
================
// src/composables/useModal.ts
export default function useModal() {
  const isModalOpen = ref(false)

  const openModal = () => {
    isModalOpen.value = true;
  }

  const closeModal = () => {
    isModalOpen.value = false;
  }

  return {
    isModalOpen,
    openModal,
    closeModal,
  }
}

================
File: src/pages/index.vue
================
<!-- src/pages/index.vue -->
<script setup lang="ts">
import PokemonList from '@/components/PokemonList.vue';
import Pagination from '@/components/pagination/Pagination.vue';

</script>

<template>
  <div class="container">
    <PokemonList />
    <Pagination />
  </div>
</template>

<style scoped>
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: rgb(203, 238, 238);
}
</style>

================
File: src/plugins/axios.ts
================
import axios from 'axios';

export default defineNuxtPlugin(() => {
  const pokeApiPlugin = axios.create({
    baseURL: 'https://pokeapi.co/api/v2/',
    headers: {
      'Content-Type': 'application/json',
    }
  });

  return {
    provide: {
      pokeApiPlugin,
    },
  };
});

================
File: src/public/robots.txt
================


================
File: src/server/tsconfig.json
================
{
  "extends": "../.nuxt/tsconfig.server.json"
}

================
File: src/services/pokeApi.ts
================
// src/services/pokeApi.ts
export {
  fetchPokemonDataV2,
  fetchPokemonData,
  fetchPokemonSelectionData,
  fetchSingleData,
  fetchSpeciesData
};

const fetchPokemonDataV2 = async() => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon/?offset=0&limit=386`);
  return response.data;
};

const fetchPokemonData = async() => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get('pokemon');
  return response.data;
};

const fetchPokemonSelectionData = async(offset: number, finalLimit: number) => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon/?offset=${offset}&limit=${finalLimit}`);
  return response.data;
};

const fetchSingleData = async(endpoint: string) => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon/${endpoint}`)
  return response.data;
};

const fetchSpeciesData = async(endpoint: string) => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon-species/${endpoint}`)
  return response.data;
}

================
File: src/stores/pokemonDataStore_V2.ts
================
// src/stores/pokemonDataStore_V2.ts
import { defineStore } from "pinia";
import { fetchPokemonDataV2, fetchSingleData, fetchSpeciesData } from "@/services/pokeApi";
import type { PokemonListType, DisplayDataType, LanguageNameObjType } from "@/types/pokemonDataStoreTypes";

export const usePokemonDataStoreV2 = defineStore('pokemonData', {
  state: () => ({
    pokemonList: [] as PokemonListType,
    displayPokemonList: [] as PokemonListType,
    paginatedPokemonList: [] as PokemonListType,
    favoritePokemonList: [] as PokemonListType,
    displayIdData: {} as DisplayDataType,
    displayImageDataV2: {} as DisplayDataType,
    displayJpNameDataV2: {} as DisplayDataType,
    itemsPerPage: 5, // 1ページあたりのポケモン数
    currentPage: 1, // 現在のページ番号
    showFavorites: false as boolean,
  }),
  getters: {
    filteredPokemonList(state) {
      return state.paginatedPokemonList;
    }
  },
  actions: {
    // 386匹のポケモンを一括取得
    async getPokemonList() {
      const response = await fetchPokemonDataV2();
      this.pokemonList = response.results;
      this.setDisplayPokemonList(this.pokemonList); // 実際に表示されるリストにも格納しておく
      this.updatePaginatedPokemonList(1); // 初回ロード時は1ページ目を設定
    },
    // 表示させるポケモンリスト
    setDisplayPokemonList(list: PokemonListType) {
      this.displayPokemonList = list;
    },
    // お気に入りに追加
    addFavoritePokemon(name: string, url: string) {
      if (!this.favoritePokemonList.find(pokemon => pokemon.name === name)) {
        this.favoritePokemonList.push({ name, url });
      }
    },
    // お気に入りから削除
    deleteFavoritePokemon(name: string) {
      this.favoritePokemonList = this.favoritePokemonList.filter(pokemon => pokemon.name !== name);
    },
    // お気に入り表示の切り替え
    toggleShowFavorites() {
      this.showFavorites = !this.showFavorites;
      this.setDisplayPokemonList(this.showFavorites ? this.favoritePokemonList : this.pokemonList);
      this.updatePaginatedPokemonList(1);
    },
    // ページデータを更新
    updatePaginatedPokemonList(page: number) {
      const sourceList = this.displayPokemonList;
      const startIndex = (page - 1) * this.itemsPerPage;
      const endIndex = startIndex + this.itemsPerPage;
      this.paginatedPokemonList = sourceList.slice(startIndex, endIndex);
      this.currentPage = page;
    },
    // ポケモンのIDを格納する
    getPokemonIdList() {
      this.pokemonList.map((pokemon) => {
        const id = getLastElementUrl(pokemon.url);
        this.displayIdData[pokemon.name] = id;
      });
    },
    // 先にポケモン画像を先に取得する
    loadPokemonImageV2() {
      this.pokemonList.map(async (pokemon) => {
        const id = getLastElementUrl(pokemon.url);
        const response = await fetchSingleData(id);
        const imageUrl = response.sprites.front_default;
        this.displayImageDataV2[pokemon.name] = imageUrl;
      });
    },
    loadPokemonJpNameV2() {
      this.pokemonList.map(async (pokemon) => {
        const id = getLastElementUrl(pokemon.url);
        const response = await fetchSpeciesData(id);
        const jpName = response.names.find(
          (obj: LanguageNameObjType) => obj.language.name === 'ja'
        );
        this.displayJpNameDataV2[pokemon.name] = jpName.name;
      });
    }
  },
});

================
File: src/types/pokemonDataStoreTypes.ts
================
export type PokemonListType = { name: string, url: string }[];

export type DisplayDataType = {
  [name: string]: string;
};

export type LanguageNameObjType = {
  language: {
    name: string;
    url: string;
  };
  name: string;
};

================
File: src/utils/toggleFavorite.ts
================
// src/utils/toggleFavorite.ts
import { usePokemonDataStoreV2 } from "@/stores/pokemonDataStore_V2";

export const toggleFavorite = (isVisible: boolean, name: string, url: string) => {
  const pokemonDataStore = usePokemonDataStoreV2();

  if (!isVisible) {
    pokemonDataStore.addFavoritePokemon(name, url); 
  } else {
    pokemonDataStore.deleteFavoritePokemon(name);
  }
};

================
File: src/utils/urlUtils.ts
================
export const getLastElementUrl = (url: string) => {
  // URLをスラッシュ（/）で分割して最後の要素を取得
  const parts = url.split('/').filter(Boolean); // 空の要素を除外
  return parts[parts.length - 1];
}

================
File: .gitignore
================
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example

memo

================
File: app.vue
================
<template>
  <div>
    <NuxtPage />
  </div>
</template>

================
File: nuxt.config.ts
================
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  compatibilityDate: '2024-11-01',
  devtools: { enabled: true },
  srcDir: 'src/',
  modules: [
    '@nuxtjs/tailwindcss',
    '@pinia/nuxt',
  ],
  css: ['@/assets/css/main.css'],
  postcss: {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  },
})

================
File: package.json
================
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "dependencies": {
    "@nuxtjs/tailwindcss": "^6.12.2",
    "@pinia/nuxt": "^0.9.0",
    "axios": "^1.7.9",
    "nuxt": "^3.14.1592",
    "pinia": "^2.3.0",
    "vue": "latest",
    "vue-router": "latest"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.16"
  },
  "overrides": {
    "vue": "latest"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Nuxt Minimal Starter

Look at the [Nuxt documentation](https://nuxt.com/docs/getting-started/introduction) to learn more.

## Setup

Make sure to install dependencies:

```bash
# npm
npm install

# pnpm
pnpm install

# yarn
yarn install

# bun
bun install
```

## Development Server

Start the development server on `http://localhost:3000`:

```bash
# npm
npm run dev

# pnpm
pnpm dev

# yarn
yarn dev

# bun
bun run dev
```

## Production

Build the application for production:

```bash
# npm
npm run build

# pnpm
pnpm build

# yarn
yarn build

# bun
bun run build
```

Locally preview production build:

```bash
# npm
npm run preview

# pnpm
pnpm preview

# yarn
yarn preview

# bun
bun run preview
```

Check out the [deployment documentation](https://nuxt.com/docs/getting-started/deployment) for more information.

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./components/**/*.{js,vue,ts}",
    "./layouts/**/*.vue",
    "./pages/**/*.vue",
    "./plugins/**/*.{js,ts}",
    "./app.vue",
    "./error.vue",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tsconfig.json
================
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "extends": "./.nuxt/tsconfig.json"
}
