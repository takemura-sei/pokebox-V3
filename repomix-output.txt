This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-27T22:43:34.888Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
src/
  assets/
    css/
      main.css
  components/
    card/
      PokemonCard.vue
      PokemonImages.vue
      PokemonJpName.vue
    favorite/
      FavoritePokemon.vue
    modal/
       Modal .vue
    pagination/
      Pagination.vue
    PokemonList.vue
  composables/
    useModal.ts
  pages/
    index.vue
  plugins/
    axios.ts
  public/
    robots.txt
  server/
    tsconfig.json
  services/
    pokeApi.ts
  stores/
    favoriteStore.ts
    paginationStore.ts
    pokemonDataStore_V2.ts
    pokemonDataStore.ts
  types/
    pokemonTypes.ts
  utils/
    displayRangeUtils.ts
    toggleFavorite.ts
    urlUtils.ts
.gitignore
app.vue
nuxt.config.ts
package.json
postcss.config.js
README.md
tailwind.config.js
tsconfig.json

================================================================
Files
================================================================

================
File: src/assets/css/main.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

================
File: src/components/card/PokemonCard.vue
================
<!-- src/components/card/PokemonCard.vue -->
<script setup>
import PokemonImages from '@/components/card/PokemonImages.vue';
import PokemonJpName from '@/components/card/PokemonJpName.vue';
import Modal from '@/components/modal/ Modal .vue';
import useModal from '@/composables/useModal';

const { isModalOpen, openModal, closeModal } = useModal();

const props = defineProps({
  data: {
    type: Object,
    required: true
  }
});
</script>

<template>
  <div class="bg-white p-2 rounded-lg" @click="openModal()">
    <PokemonJpName :name="props.data.name" :url="props.data.url"/>
    <PokemonImages :name="props.data.name" :url="props.data.url"/>

    <!-- モーダルウィンドウの表示 -->
    <Modal v-if="isModalOpen" :name="props.data.name" :url="props.data.url" @close="closeModal()"/>
  </div>
</template>

================
File: src/components/card/PokemonImages.vue
================
<script setup>
import { usePokemonDataStore } from '@/stores/pokemonDataStore';
import { getLastElementUrl } from '@/utils/urlUtils';

const pokemonDataStore = usePokemonDataStore();
const imageUrl = ref('');

const props = defineProps ({
  name: {
    type: String,
    required: true
  },
  url: {
    type: String,
    required: true
  }
});
const lastElementUrl = getLastElementUrl(props.url);

onMounted(async () => {
  await pokemonDataStore.loadPokemonImage(props.name, lastElementUrl);
  imageUrl.value = pokemonDataStore.displayImageData[props.name];
})

</script>

<template>
    <img :src=imageUrl alt="">
</template>

================
File: src/components/card/PokemonJpName.vue
================
<script setup>
import { usePokemonDataStore } from '@/stores/pokemonDataStore';
import { getLastElementUrl } from '@/utils/urlUtils';

const pokemonDataStore = usePokemonDataStore();
const jpName = ref('');

const props = defineProps({
  name: {
    type: String,
    required: true
  },
  url: {
    type: String,
    required: true
  }
});
const lastElementUrl = getLastElementUrl(props.url);

onMounted(async () => {
  await pokemonDataStore.loadPokemonJpName(props.name, lastElementUrl);
  jpName.value = pokemonDataStore.displayJpNameData[props.name];
})

</script>

<template>
  <p>{{ jpName }}</p>
</template>

================
File: src/components/favorite/FavoritePokemon.vue
================
<script setup>
import { useFavoriteStore } from '@/stores/favoriteStore';
import { toggleFavorite } from '@/utils/toggleFavorite';

const favoriteStore = useFavoriteStore()

const props = defineProps({
  name: {
    type: String,
    required: true
  },
  url: {
    type: String,
    required: true
  }
})

const isFavorite = computed(() => !!favoriteStore.favoriteBox[props.name])
</script>

<template>
  <button @click="toggleFavorite(isFavorite, name, url)" class="favorite-button">
    <!-- お気に入り登録時は黄色、未登録時は灰色 -->
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      class="favorite-icon"
      :class="{ 'favorite-active': isFavorite, 'favorite-inactive': !isFavorite }"
    >
    <path
      fill="currentColor"
      d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
    />
    </svg>
  </button>
</template>

<style scoped>
/* ボタンのデザインを調整 */
.favorite-button {
  background: none;
  border: none;
  cursor: pointer;
  padding: 0;
}

/* 星アイコンのサイズ調整 */
.favorite-icon {
  width: 24px;
  height: 24px;
  transition: color 0.3s ease;
}

/* 登録済みの場合の色 (黄色) */
.favorite-active {
  color: #ffc107;
}

/* 未登録の場合の色 (灰色) */
.favorite-inactive {
  color: #ccc;
}
</style>

================
File: src/components/modal/ Modal .vue
================
<!-- src/components/modal/Modal.vue -->
<script setup>
import FavoritePokemon from '@/components/favorite/FavoritePokemon.vue';
import PokemonImages from '@/components/card/PokemonImages.vue';
import PokemonJpName from '@/components/card/PokemonJpName.vue';
import { useFavoriteStore } from '@/stores/favoriteStore';
import { toggleFavorite } from '@/utils/toggleFavorite';

const favoriteStore = useFavoriteStore();

const props = defineProps({
  name: {
    type: String,
    required: true
  },
  url: {
    type: String,
    required: true
  }
})

const isFavorite = computed(() => !!favoriteStore.favoriteBox[props.name])
</script>

<template>
  <div class="modal-overlay" @click.stop="$emit('close')">
    <div class="modal-content" @click.stop>
      <FavoritePokemon :name="name" :url="url"/>
      <PokemonJpName :name="name" :url="url"/>
      <PokemonImages :name="name" :url="url"/>
      <button class="block" @click="toggleFavorite(isFavorite, name, url)">お気に入り</button>
      <button class="close-button" @click.stop="$emit('close')">閉じる</button>
    </div>
  </div>
</template>

<style scoped>
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}
.modal-content {
  background: white;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}
.close-button {
  margin-top: 20px;
}
</style>

================
File: src/components/pagination/Pagination.vue
================
<script setup>
import { usePaginationStore } from '@/stores/paginationStore'
const paginationStore = usePaginationStore()

const currentPage = computed(() => paginationStore.currentPage)
const totalPages = computed(() => paginationStore.totalPages)

const isFirstPage = computed(() => currentPage.value === 1)
const isLastPage = computed(() => currentPage.value === totalPages.value)

const prevPage = () => {
  if (!isFirstPage.value) {
    paginationStore.setCurrentPage(currentPage.value - 1)
  }
}

const nextPage = () => {
  if (!isLastPage.value) {
    paginationStore.setCurrentPage(currentPage.value + 1)
  }
}
</script>

<template>
  <nav aria-label="Pagination">
    <ul class="pagination">
      <li>
        <button @click="prevPage" :disabled="isFirstPage">＜</button>
      </li>
      <li>
        <button>
          {{ currentPage }}
        </button>
      </li>
      <li>
        <button @click="nextPage" :disabled="isLastPage">＞</button>
      </li>
    </ul>
  </nav>
</template>

<style scoped>
.pagination {
  display: flex;
  align-items: center;
  justify-content: center;
  list-style: none;
  margin-top: 32px;
}

.pagination li {
  margin: 0 5px;
}

.pagination li button {
  padding: 10px 15px;
  border: none;
  border-radius: 20px;
  background-color: #fff;
}

button.active {
  font-weight: bold;
  color: blue;
}
</style>

================
File: src/components/PokemonList.vue
================
<script setup lang="ts">
import { usePokemonDataStore } from '@/stores/pokemonDataStore';
import { usePaginationStore } from '@/stores/paginationStore';
import PokemonCard from '@/components/card/PokemonCard.vue';

const pokemonDataStore = usePokemonDataStore();
const paginationStore = usePaginationStore();

onMounted(async () => {
  await pokemonDataStore.loadPokemonSelection();
});

// ページ変更を監視してデータを再取得
watch(() => paginationStore.currentPage, () => {
  pokemonDataStore.loadPokemonSelection()
})
</script>

<template>
  <div v-if="pokemonDataStore.displayPokemonList" class="container">
    <ul class="flex flex-wrap gap-3 justify-center">
      <li v-for="pokemon in pokemonDataStore.displayPokemonList" :key="pokemon">
        <PokemonCard :data="pokemon" />
      </li>
    </ul>
  </div>
  <p v-else>Loading Pokémon data...</p>
</template>

================
File: src/composables/useModal.ts
================
// src/composables/useModal.ts
export default function useModal() {
  const isModalOpen = ref(false)

  const openModal = () => {
    isModalOpen.value = true;
    console.log('ok', isModalOpen.value);
  }

  const closeModal = () => {
    isModalOpen.value = false;
    console.log('false', isModalOpen.value);
  }

  return {
    isModalOpen,
    openModal,
    closeModal,
  }
}

================
File: src/pages/index.vue
================
<!-- src/pages/index.vue -->
<script setup lang="ts">
import PokemonList from '@/components/PokemonList.vue';
import Pagination from '@/components/pagination/Pagination.vue';
import { usePokemonDataStoreV2 } from '@/stores/pokemonDataStore_V2'

const pokemonDataStoreV2 = usePokemonDataStoreV2();

// サーバーサイドでポケモンリストを取得
await pokemonDataStoreV2.loadPokemonData();
</script>

<template>
  <div class="container">
    <PokemonList />
    <Pagination />
  </div>
</template>

<style scoped>
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  background-color: rgb(203, 238, 238);
}
</style>

================
File: src/plugins/axios.ts
================
import axios from 'axios';

export default defineNuxtPlugin(() => {
  const pokeApiPlugin = axios.create({
    baseURL: 'https://pokeapi.co/api/v2/',
    headers: {
      'Content-Type': 'application/json',
    }
  });

  return {
    provide: {
      pokeApiPlugin,
    },
  };
});

================
File: src/public/robots.txt
================


================
File: src/server/tsconfig.json
================
{
  "extends": "../.nuxt/tsconfig.server.json"
}

================
File: src/services/pokeApi.ts
================
// src/services/pokeApi.ts
export {
  fetchPokemonDataV2,
  fetchPokemonData,
  fetchPokemonSelectionData,
  fetchSingleData,
  fetchSpeciesData
};

const fetchPokemonDataV2 = async() => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon/?offset=0&limit=151`);
  return response.data;
};

const fetchPokemonData = async() => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get('pokemon');
  return response.data;
};

const fetchPokemonSelectionData = async(offset: number, finalLimit: number) => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon/?offset=${offset}&limit=${finalLimit}`);
  return response.data;
};

const fetchSingleData = async(endpoint: string) => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon/${endpoint}`)
  return response.data;
};

const fetchSpeciesData = async(endpoint: string) => {
  const { $pokeApiPlugin } = useNuxtApp();
  const response = await $pokeApiPlugin.get(`pokemon-species/${endpoint}`)
  return response.data;
}

================
File: src/stores/favoriteStore.ts
================
import { defineStore } from "pinia";
import type { FavoriteBoxType } from "@/types/pokemonTypes";

export const useFavoriteStore = defineStore('favorite', {
  state: () => ({
    favoriteBox: {} as FavoriteBoxType,
  }),
  actions: {
    // お気に入りに追加
    choiseFavoritePokemon(name: string, endpoint: string) {
      if (!this.favoriteBox[name]) {
        this.favoriteBox[name] = endpoint;
      } 
    },
    // お気に入りから削除
    deleteFavoritePokemon(name: string) {
      if (this.favoriteBox[name]) {
        delete this.favoriteBox[name];
      }
    }
  }
});

================
File: src/stores/paginationStore.ts
================
import { defineStore } from "pinia";
import { usePokemonDataStoreV2 } from "@/stores/pokemonDataStore_V2";

const pokemonDataStore_V2 = usePokemonDataStoreV2();

export const usePaginationStore = defineStore('pagination', {
  state: () => ({
    currentPage: 1,
    totalPages: 0,
    itemsPerPage: 30,
  }),
  actions: {
    setCurrentPage(page: number) {
      this.currentPage = page;
    },
    setTotalPage() {
      // ポケモンは151匹までなので、151匹に基づいてページ数を計算
      this.totalPages = Math.ceil(151 / this.itemsPerPage);
    }
  }
})

================
File: src/stores/pokemonDataStore_V2.ts
================
// src/stores/pokemonDataStore_V2.ts
import { defineStore } from "pinia";
import { fetchPokemonDataV2 } from "@/services/pokeApi";

export const usePokemonDataStoreV2 = defineStore('pokemondata', {
  state: () => ({
    allPokemonList: [],
    displayPokemonList: [],
  }),
  getters: {
    firstPokemonlist: (state) => {
      
    }
  },
  actions: {
    async loadPokemonData() {
      const response = await fetchPokemonDataV2();
      this.allPokemonList = response.results;
      console.log(this.allPokemonList);
    },
  }
})

================
File: src/stores/pokemonDataStore.ts
================
// src/stores/pokemonDataStore.ts
import { defineStore } from "pinia";
import { fetchPokemonSelectionData, fetchSingleData, fetchSpeciesData } from "@/services/pokeApi";
import { getDisplayRange } from "@/utils/displayRangeUtils";
import type { DisplayImageDataType, DisplayJpNameDataType, LanguageNameObjType } from "@/types/pokemonTypes";

export const usePokemonDataStore = defineStore('pokemon', {
  state: () => ({
    displayPokemonList: [],
    displayImageData: {} as DisplayImageDataType,
    displayJpNameData: {} as DisplayJpNameDataType,
  }),
  actions: {
    async loadPokemonSelection() {
      const { offset, finalLimit } = getDisplayRange();
      const response = await fetchPokemonSelectionData(offset, finalLimit);
      this.displayPokemonList = response.results;
    },
    async loadPokemonImage(name: string, endpoint: string) {
      const response = await fetchSingleData(endpoint);
      const imageUrl = response.sprites.front_default;
      this.displayImageData[name] = imageUrl;
    },
    async loadPokemonJpName(name: string, endpoint: string) {
      const response = await fetchSpeciesData(endpoint);
      const jpNameObj = response.names.find(
        (obj: LanguageNameObjType) => obj.language.name === 'ja'
      );
      this.displayJpNameData[name] = jpNameObj.name;
    }
  }
});

================
File: src/types/pokemonTypes.ts
================
export type DisplayImageDataType = {
  [key: string]: string;
};

export type DisplayJpNameDataType = {
  [key: string]: string;
};

export type LanguageNameObjType = {
  language: {
    name: string;
    url: string;
  };
  name: string;
};

export type FavoriteBoxType = {
  [key: string]: string;
}

================
File: src/utils/displayRangeUtils.ts
================
import { usePaginationStore } from "@/stores/paginationStore";

export const getDisplayRange = () => {
  const paginationStore = usePaginationStore();
  const offset = (paginationStore.currentPage - 1) * paginationStore.itemsPerPage;
  const limit = paginationStore.itemsPerPage;

  const remainingPokemons = 151 - offset;
  const finalLimit = remainingPokemons < limit ? remainingPokemons : limit;

  paginationStore.setTotalPage();
  return { offset, finalLimit };
}

================
File: src/utils/toggleFavorite.ts
================
// src/utils/toggleFavorite.ts
import { useFavoriteStore } from "@/stores/favoriteStore";
import { useNuxtApp } from "#app"; // Nuxtのユーティリティをインポート

export const toggleFavorite = (isVisible: boolean, name: string, url: string) => {
  const { $pinia } = useNuxtApp(); // Piniaインスタンスを取得
  const favoriteStore = useFavoriteStore($pinia); // インスタンスを渡してストアを初期化

  if (!isVisible) {
    favoriteStore.choiseFavoritePokemon(name, url); 
    console.log(favoriteStore.favoriteBox);
  } else {
    favoriteStore.deleteFavoritePokemon(name);
    console.log(favoriteStore.favoriteBox);
  }
};

================
File: src/utils/urlUtils.ts
================
export const getLastElementUrl = (url: string) => {
  // URLをスラッシュ（/）で分割して最後の要素を取得
  const parts = url.split('/').filter(Boolean); // 空の要素を除外
  return parts[parts.length - 1];
}

================
File: .gitignore
================
# Nuxt dev/build outputs
.output
.data
.nuxt
.nitro
.cache
dist

# Node dependencies
node_modules

# Logs
logs
*.log

# Misc
.DS_Store
.fleet
.idea

# Local env files
.env
.env.*
!.env.example

memo

================
File: app.vue
================
<template>
  <div>
    <NuxtPage />
  </div>
</template>

================
File: nuxt.config.ts
================
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  compatibilityDate: '2024-11-01',
  devtools: { enabled: true },
  srcDir: 'src/',
  modules: [
    '@nuxtjs/tailwindcss',
    '@pinia/nuxt',
  ],
  css: ['@/assets/css/main.css'],
  postcss: {
    plugins: {
      tailwindcss: {},
      autoprefixer: {},
    },
  },
})

================
File: package.json
================
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "nuxt build",
    "dev": "nuxt dev",
    "generate": "nuxt generate",
    "preview": "nuxt preview",
    "postinstall": "nuxt prepare"
  },
  "dependencies": {
    "@nuxtjs/tailwindcss": "^6.12.2",
    "@pinia/nuxt": "^0.9.0",
    "axios": "^1.7.9",
    "nuxt": "^3.14.1592",
    "pinia": "^2.3.0",
    "vue": "latest",
    "vue-router": "latest"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.16"
  },
  "overrides": {
    "vue": "latest"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# Nuxt Minimal Starter

Look at the [Nuxt documentation](https://nuxt.com/docs/getting-started/introduction) to learn more.

## Setup

Make sure to install dependencies:

```bash
# npm
npm install

# pnpm
pnpm install

# yarn
yarn install

# bun
bun install
```

## Development Server

Start the development server on `http://localhost:3000`:

```bash
# npm
npm run dev

# pnpm
pnpm dev

# yarn
yarn dev

# bun
bun run dev
```

## Production

Build the application for production:

```bash
# npm
npm run build

# pnpm
pnpm build

# yarn
yarn build

# bun
bun run build
```

Locally preview production build:

```bash
# npm
npm run preview

# pnpm
pnpm preview

# yarn
yarn preview

# bun
bun run preview
```

Check out the [deployment documentation](https://nuxt.com/docs/getting-started/deployment) for more information.

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./components/**/*.{js,vue,ts}",
    "./layouts/**/*.vue",
    "./pages/**/*.vue",
    "./plugins/**/*.{js,ts}",
    "./app.vue",
    "./error.vue",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

================
File: tsconfig.json
================
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "extends": "./.nuxt/tsconfig.json"
}
